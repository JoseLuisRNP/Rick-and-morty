{"version":3,"sources":["assets/img/rick-morty.png","layout/header.tsx","character/card-character.tsx","character/info-character.tsx","index.tsx","app.tsx","model/character.vm.ts","model/character.api.ts","model/character.mapper.ts"],"names":["module","exports","Header","className","src","Logo","alt","style","width","CardCharacter","props","character","onSeeInfo","image","name","species","onClick","InfoCharacter","onClose","status","gender","origin","location","type","href","e","preventDefault","ReactDOM","React","characters","setCharacters","filter","setFilter","id","characterSelected","setCharacterSelected","showModal","setShowModal","fetch","then","res","json","data","getCharacters","info","results","map","characterApiToVM","charactersCollectionApiToVM","catch","err","handleSeeInfo","onChange","target","value","placeholder","key","document","getElementById"],"mappings":"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","file":"static/js/main.826ccd73.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rick-morty.4bfa3d4d.png\";","import * as React from 'react';\r\nimport Logo from '../assets/img/rick-morty.png';\r\nexport const Header: React.FC = () => {\r\n  return (\r\n    <div className=\"header\">\r\n      <img src={Logo} alt=\"\" style={{\r\n        width: '40%',\r\n      }}/>\r\n    </div>\r\n  )\r\n}","import * as React from 'react';\r\nimport { CharacterVM } from '../model/character.vm';\r\n\r\ninterface Props {\r\n  character: CharacterVM;\r\n  onSeeInfo: (character: CharacterVM) => void;\r\n}\r\n\r\nexport const CardCharacter: React.FC<Props> = (props) => {\r\n  const { character,onSeeInfo } = props;\r\n  const {image, name, species, } = character;\r\n\r\n  const handleSeeInfo = () => onSeeInfo(character)\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <img src={image} alt=\"\" />\r\n      <div className=\"text-center\">\r\n        <h2 className=\"card--title\">{name}</h2>\r\n        <h3 className=\"card--subtitle\">{species}</h3>\r\n        <button className=\"card--btn\" onClick={handleSeeInfo}>\r\n          See info\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import * as React from 'react';\r\nimport { CharacterVM } from '../model/character.vm';\r\ninterface Props {\r\n  character: CharacterVM\r\n  onClose: () => void;\r\n}\r\n\r\nexport const InfoCharacter: React.FC<Props> = (props) => {\r\n  const { character, onClose } = props;\r\n  const { name, status, gender, species, origin, location, type, image } = character;\r\n  const handleClose = (e) => {\r\n    e.preventDefault();\r\n    onClose();\r\n  }\r\n  return (\r\n    <div className=\"modal\">\r\n\r\n      <div className=\"modal--window\">\r\n        <a className=\"modal--btn\" href=\"\" onClick={handleClose}>X</a>\r\n        <img src={image} alt={name} />\r\n        <div className=\"modal--info\">\r\n          <p>Name: {name}</p>\r\n          <p>Status: {status}</p>\r\n          <p>Gender: {gender}</p>\r\n          <p>Specie: {species}</p>\r\n          <p>Type: {type ? type : 'Normal'}</p>\r\n          <p>Origin: {origin}</p>\r\n          <p>Location: {location}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport {App} from './app';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n","import * as React from \"react\";\r\nimport { getCharacters } from './model/character.api'\r\nimport { CharacterVM, createEmptyCharacter } from './model/character.vm'\r\nimport { charactersCollectionApiToVM } from './model/character.mapper';\r\nimport { Header } from './layout/header';\r\nimport { CardCharacter } from './character/card-character';\r\nimport {InfoCharacter} from './character/info-character';\r\nimport './index.css'\r\n\r\nexport const App: React.FunctionComponent = () => {\r\n\r\n  const [characters, setCharacters] = React.useState<CharacterVM[]>([]);\r\n  const [filter, setFilter] = React.useState<string>('');\r\n  const [characterSelected, setCharacterSelected] = React.useState<CharacterVM>(createEmptyCharacter())\r\n  const [showModal, setShowModal] = React.useState(false);\r\n\r\n\r\n  React.useEffect(() => {\r\n    getCharacters(filter)\r\n      .then(({ info, results }) => {\r\n        setCharacters(charactersCollectionApiToVM(results))\r\n      })\r\n      .catch(err => {\r\n        setCharacters([])\r\n      })\r\n  }, [filter])\r\n\r\n\r\n  const handleSeeInfo = (character: CharacterVM) => {\r\n    setShowModal(true)\r\n    setCharacterSelected(character);\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Header />\r\n      <input\r\n        onChange={e => setFilter(e.target.value)}\r\n        placeholder=\"Character's name\"\r\n        className=\"input-search\" />\r\n      <div className=\"cards-container\">\r\n        {characters[0] ? characters.map(character => (\r\n          <CardCharacter\r\n            key={character.id}\r\n            character={character}\r\n            onSeeInfo={handleSeeInfo}\r\n          >\r\n            {character.name}\r\n          </CardCharacter>\r\n        ))\r\n          :\r\n          <p>Not characters with {filter}</p>\r\n        }\r\n      </div>\r\n      {showModal && <InfoCharacter character={characterSelected} onClose={() => setShowModal(false)}/>}\r\n    </div>\r\n\r\n  )\r\n};\r\n","export interface CharacterVM {\r\n  id: number;\r\n  name: string;\r\n  status: string;\r\n  species: string;\r\n  type: string;\r\n  gender: string;\r\n  origin: string;\r\n  location: string;\r\n  image: string;\r\n}\r\n\r\nexport const createEmptyCharacter = (): CharacterVM => ({\r\n  id: -1,\r\n  name: '',\r\n  gender: '',\r\n  image: '',\r\n  location: '',\r\n  origin: '',\r\n  species: '',\r\n  status: '',\r\n  type: ''\r\n});\r\n\r\n","interface Location {\r\n  name: string;\r\n  url: string\r\n}\r\n\r\nexport interface CharacterApi {\r\n  id: number;\r\n  name: string;\r\n  status: string;\r\n  species: string;\r\n  type: string;\r\n  gender: string;\r\n  origin: Location;\r\n  location: Location;\r\n  image: string;\r\n  episode: string[];\r\n  url: string;\r\n  created: string;\r\n}\r\n\r\ninterface Info {\r\n  count: number;\r\n  pages: number;\r\n  next: string;\r\n  prev: string;\r\n}\r\n\r\ninterface ApiResult{\r\n  info: Info;\r\n  results: CharacterApi[];\r\n} \r\n\r\n\r\n\r\nexport const getCharacters = (name = ''): Promise<ApiResult> => (\r\n  fetch(`https://rickandmortyapi.com/api/character/?name=${name}`)\r\n    .then(res => res.json())\r\n    .then(data => data)\r\n  )","import {CharacterApi} from './character.api';\r\nimport {CharacterVM} from './character.vm';\r\n\r\nexport const characterApiToVM = ({id, name, status, species, type, gender, origin,location, image}: CharacterApi): CharacterVM => ({\r\n  id: id,\r\n  name: name,\r\n  status: status,\r\n  species: species,\r\n  type: type,\r\n  gender: gender,\r\n  origin: origin.name,\r\n  location: location.name,\r\n  image: image\r\n})\r\n\r\nexport const charactersCollectionApiToVM = (characters: CharacterApi[]): CharacterVM[] => (\r\n  characters.map(character => characterApiToVM(character))\r\n)"],"sourceRoot":""}