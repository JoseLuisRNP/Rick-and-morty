{"version":3,"sources":["assets/img/rick-morty.png","model/character.api.ts","model/character.mapper.ts","layout/header.tsx","character/card-character.tsx","character/info-character.tsx","index.tsx","app.tsx","model/character.vm.ts"],"names":["module","exports","getCharacters","name","url","fetch","then","res","json","data","charactersCollectionApiToVM","characters","map","character","id","status","species","type","gender","origin","location","image","characterApiToVM","Header","className","src","Logo","alt","style","width","CardCharacter","props","onSeeInfo","onClick","InfoCharacter","onClose","href","e","preventDefault","ReactDOM","React","setCharacters","filter","setFilter","characterSelected","setCharacterSelected","nextPage","setNextPage","prevPage","setPrevPage","showModal","setShowModal","info","results","next","prev","catch","err","handleSeeInfo","handlePagination","onChange","target","value","placeholder","key","document","getElementById"],"mappings":"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","file":"static/js/main.4eb3af9d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rick-morty.4bfa3d4d.png\";","interface Location {\r\n  name: string;\r\n  url: string\r\n}\r\n\r\nexport interface CharacterApi {\r\n  id: number;\r\n  name: string;\r\n  status: string;\r\n  species: string;\r\n  type: string;\r\n  gender: string;\r\n  origin: Location;\r\n  location: Location;\r\n  image: string;\r\n  episode: string[];\r\n  url: string;\r\n  created: string;\r\n}\r\n\r\ninterface Info {\r\n  count: number;\r\n  pages: number;\r\n  next: string;\r\n  prev: string;\r\n}\r\n\r\ninterface ApiResult{\r\n  info: Info;\r\n  results: CharacterApi[];\r\n} \r\n\r\n\r\n\r\nexport const getCharacters = (name = '', url = `https://rickandmortyapi.com/api/character/?name=${name}`): Promise<ApiResult> => (\r\n  fetch(url)\r\n    .then(res => res.json())\r\n    .then(data => data)\r\n  )","import {CharacterApi} from './character.api';\r\nimport {CharacterVM} from './character.vm';\r\n\r\nexport const characterApiToVM = ({id, name, status, species, type, gender, origin,location, image}: CharacterApi): CharacterVM => ({\r\n  id: id,\r\n  name: name,\r\n  status: status,\r\n  species: species,\r\n  type: type,\r\n  gender: gender,\r\n  origin: origin.name,\r\n  location: location.name,\r\n  image: image\r\n})\r\n\r\nexport const charactersCollectionApiToVM = (characters: CharacterApi[]): CharacterVM[] => (\r\n  characters.map(character => characterApiToVM(character))\r\n)","import * as React from 'react';\r\nimport Logo from '../assets/img/rick-morty.png';\r\nexport const Header: React.FC = () => {\r\n  return (\r\n    <div className=\"header\">\r\n      <img src={Logo} alt=\"\" style={{\r\n        width: '40%',\r\n      }}/>\r\n    </div>\r\n  )\r\n}","import * as React from 'react';\r\nimport { CharacterVM } from '../model/character.vm';\r\n\r\ninterface Props {\r\n  character: CharacterVM;\r\n  onSeeInfo: (character: CharacterVM) => void;\r\n}\r\n\r\nexport const CardCharacter: React.FC<Props> = (props) => {\r\n  const { character,onSeeInfo } = props;\r\n  const {image, name, species, } = character;\r\n\r\n  const handleSeeInfo = () => onSeeInfo(character)\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <img src={image} alt=\"\" />\r\n      <div className=\"text-center\">\r\n        <h2 className=\"card--title\">{name}</h2>\r\n        <h3 className=\"card--subtitle\">{species}</h3>\r\n        <button className=\"btn btn--primary\" onClick={handleSeeInfo}>\r\n          See info\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import * as React from 'react';\r\nimport { CharacterVM } from '../model/character.vm';\r\ninterface Props {\r\n  character: CharacterVM\r\n  onClose: () => void;\r\n}\r\n\r\nexport const InfoCharacter: React.FC<Props> = (props) => {\r\n  const { character, onClose } = props;\r\n  const { name, status, gender, species, origin, location, type, image } = character;\r\n  const handleClose = (e) => {\r\n    e.preventDefault();\r\n    onClose();\r\n  }\r\n  return (\r\n    <div className=\"modal\">\r\n\r\n      <div className=\"modal--window\">\r\n        <a className=\"modal--btn\" href=\"\" onClick={handleClose}>X</a>\r\n        <img src={image} alt={name} />\r\n        <div className=\"modal--info\">\r\n          <p>Name: {name}</p>\r\n          <p>Status: {status}</p>\r\n          <p>Gender: {gender}</p>\r\n          <p>Specie: {species}</p>\r\n          <p>Type: {type ? type : 'Normal'}</p>\r\n          <p>Origin: {origin}</p>\r\n          <p>Location: {location}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport {App} from './app';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n","import * as React from \"react\";\r\nimport { getCharacters } from './model/character.api'\r\nimport { CharacterVM, createEmptyCharacter } from './model/character.vm'\r\nimport { charactersCollectionApiToVM } from './model/character.mapper';\r\nimport { Header } from './layout/header';\r\nimport { CardCharacter } from './character/card-character';\r\nimport { InfoCharacter } from './character/info-character';\r\nimport './index.css'\r\n\r\nexport const App: React.FunctionComponent = () => {\r\n\r\n  const [characters, setCharacters] = React.useState<CharacterVM[]>([]);\r\n  const [filter, setFilter] = React.useState<string>('');\r\n  const [characterSelected, setCharacterSelected] = React.useState<CharacterVM>(createEmptyCharacter())\r\n  const [nextPage, setNextPage] = React.useState('');\r\n  const [prevPage, setPrevPage] = React.useState('');\r\n  const [showModal, setShowModal] = React.useState(false);\r\n\r\n\r\n  React.useEffect(() => {\r\n    getCharacters(filter)\r\n      .then(({ info, results }) => {\r\n        setCharacters(charactersCollectionApiToVM(results))\r\n        setNextPage(info.next);\r\n        setPrevPage(info.prev);\r\n      })\r\n      .catch(err => {\r\n        setCharacters([])\r\n      })\r\n  }, [filter])\r\n\r\n\r\n  const handleSeeInfo = (character: CharacterVM) => {\r\n    setShowModal(true)\r\n    setCharacterSelected(character);\r\n  }\r\n\r\n  const handlePagination = (url) => {\r\n    getCharacters(filter, url)\r\n      .then(({ info, results }) => {\r\n        setCharacters(charactersCollectionApiToVM(results))\r\n        setNextPage(info.next);\r\n        setPrevPage(info.prev);\r\n      })\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Header />\r\n      <input\r\n        onChange={e => setFilter(e.target.value)}\r\n        placeholder=\"Character's name\"\r\n        className=\"input-search\" />\r\n      <div className=\"cards-container\">\r\n        {characters[0] ? characters.map(character => (\r\n          <CardCharacter\r\n            key={character.id}\r\n            character={character}\r\n            onSeeInfo={handleSeeInfo}\r\n          >\r\n            {character.name}\r\n          </CardCharacter>\r\n        ))\r\n          :\r\n          <p>Not characters with {filter}</p>\r\n        }\r\n      </div>\r\n      <div>\r\n        {prevPage && <button className=\"btn btn--secondary\" onClick={() => handlePagination(prevPage)}>Back</button>}\r\n        {nextPage && <button className=\"btn btn--secondary\" onClick={() => handlePagination(nextPage)}>Next</button>}\r\n      </div>\r\n      {showModal && <InfoCharacter character={characterSelected} onClose={() => setShowModal(false)} />}\r\n    </div>\r\n\r\n  )\r\n};\r\n","export interface CharacterVM {\r\n  id: number;\r\n  name: string;\r\n  status: string;\r\n  species: string;\r\n  type: string;\r\n  gender: string;\r\n  origin: string;\r\n  location: string;\r\n  image: string;\r\n}\r\n\r\nexport const createEmptyCharacter = (): CharacterVM => ({\r\n  id: -1,\r\n  name: '',\r\n  gender: '',\r\n  image: '',\r\n  location: '',\r\n  origin: '',\r\n  species: '',\r\n  status: '',\r\n  type: ''\r\n});\r\n\r\n"],"sourceRoot":""}